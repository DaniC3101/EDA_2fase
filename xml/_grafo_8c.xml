<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_grafo_8c" kind="file" language="C++">
    <compoundname>Grafo.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_biblioteca_2_estruturas_8h" local="yes">Estruturas.h</includes>
    <incdepgraph>
      <node id="5">
        <label>Estruturas.h</label>
        <link refid="_biblioteca_2_estruturas_8h_source"/>
      </node>
      <node id="1">
        <label>Biblioteca/Grafo.c</label>
        <link refid="_grafo_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_grafo_8c_1a3e1bcf3f33a4ca08c529b2583480ec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
        <definition>Grafo * CriarGrafo</definition>
        <argsstring>(int linhas, int colunas)</argsstring>
        <name>CriarGrafo</name>
        <param>
          <type>int</type>
          <declname>linhas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colunas</declname>
        </param>
        <briefdescription>
<para>Cria e inicializa um novo grafo com as dimensões indicadas. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria um novo grafo com base nas dimensões especificadas.</para>
<para>Aloca memória para a estrutura do grafo, define as suas dimensões e inicializa o ponteiro para o primeiro vértice como NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linhas</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de linhas da matriz do grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colunas</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de colunas da matriz do grafo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Grafo* Apontador para o grafo criado, ou NULL em caso de falha. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Grafo.c" line="15" column="7" bodyfile="Biblioteca/Grafo.c" bodystart="15" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="_grafo_8c_1a9b9eb1808ea0f388f2cf131165b8d6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AdicionarVertice</definition>
        <argsstring>(Grafo *grafo, Vertice *verticeCriado)</argsstring>
        <name>AdicionarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeCriado</declname>
        </param>
        <briefdescription>
<para>Adiciona um novo vértice ao grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Insere o vértice no final da lista ligada de vértices do grafo. Após a inserção, chama a função PercorrerGrafo para atualizar as ligações entre o novo vértice e os existentes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo onde o vértice será inserido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeCriado</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice a adicionar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o vértice foi adicionado com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Grafo.c" line="38" column="6" bodyfile="Biblioteca/Grafo.c" bodystart="38" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_grafo_8c_1a25b057885d271a291bdeb9af12f42511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafo</definition>
        <argsstring>(Grafo *grafo, Vertice *vertice)</argsstring>
        <name>PercorrerGrafo</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
<para>Atualiza o grafo com base nas frequências dos vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Atualiza o grafo com as novas ligações e nefastas após inserção de um vértice.</para>
<para>Percorre todos os vértices do grafo e, sempre que encontra um vértice com a mesma frequência que o novo vértice inserido, cria uma aresta entre eles e identifica posições nefastas.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice recentemente inserido no grafo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o processo foi realizado com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Grafo.c" line="68" column="6" bodyfile="Biblioteca/Grafo.c" bodystart="68" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Estruturas.h&quot;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>CriarGrafo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linhas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colunas)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo<sp/>=<sp/>(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_grafo" kindref="compound">Grafo</ref>));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grafo<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>grafo-&gt;dimensao[0]<sp/>=<sp/>linhas;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>grafo-&gt;dimensao[1]<sp/>=<sp/>colunas;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>grafo-&gt;primVertice<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grafo;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AdicionarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeCriado)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grafo-&gt;primVertice<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grafo-&gt;primVertice<sp/>=<sp/>verticeCriado;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>auxVertice<sp/>=<sp/>grafo-&gt;primVertice;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxVertice-&gt;proxVertice<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxVertice<sp/>=<sp/>auxVertice-&gt;proxVertice;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxVertice-&gt;proxVertice<sp/>=<sp/>verticeCriado;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercorrerGrafo(grafo,<sp/>verticeCriado);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafo(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>vertice)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>auxVertice<sp/>=<sp/>grafo-&gt;primVertice;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxVertice<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxVertice-&gt;dados.frequencia<sp/>==<sp/>vertice-&gt;dados.frequencia<sp/>&amp;&amp;<sp/>auxVertice<sp/>!=<sp/>vertice)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CriarAresta(auxVertice,<sp/>vertice);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CriarPosicaoNefasta(auxVertice,<sp/>vertice,<sp/>grafo);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxVertice<sp/>=<sp/>auxVertice-&gt;proxVertice;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Biblioteca/Grafo.c"/>
  </compounddef>
</doxygen>
