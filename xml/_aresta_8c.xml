<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_aresta_8c" kind="file" language="C++">
    <compoundname>Aresta.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_biblioteca_2_estruturas_8h" local="yes">Estruturas.h</includes>
    <incdepgraph>
      <node id="1">
        <label>Biblioteca/Aresta.c</label>
        <link refid="_aresta_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Estruturas.h</label>
        <link refid="_biblioteca_2_estruturas_8h_source"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_aresta_8c_1a1e6be863ed49892f7e938596c8d6e23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
        <definition>Aresta * CriarAresta</definition>
        <argsstring>(Vertice *verticeAtual, Vertice *verticeInserido)</argsstring>
        <name>CriarAresta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeInserido</declname>
        </param>
        <briefdescription>
<para>Cria uma nova aresta entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria uma aresta entre dois vértices.</para>
<para>Aloca memória para uma nova aresta, liga-a ao vértice de destino e insere-a no final da lista de adjacências do vértice de origem. Inicializa os campos da aresta.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeInserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aresta* Apontador para a aresta criada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Aresta.c" line="16" column="8" bodyfile="Biblioteca/Aresta.c" bodystart="16" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_aresta_8c_1a931d7918d3f43c05762c901538def236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
        <definition>Aresta * EliminarAresta</definition>
        <argsstring>(Vertice *verticeOrigem, Vertice *verticeDestino)</argsstring>
        <name>EliminarAresta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeOrigem</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeDestino</declname>
        </param>
        <briefdescription>
<para>Remove uma aresta entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Percorre a lista de adjacências do vértice de origem e remove a ligação para o vértice de destino, se existir. Liberta a memória da aresta eliminada.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeOrigem</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeDestino</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aresta* Apontador para o início atualizado da lista de arestas do vértice de origem. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Aresta.c" line="52" column="8" bodyfile="Biblioteca/Aresta.c" bodystart="52" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="_aresta_8c_1a3291297afbd5319cb04c36fbb04b6498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerArestasDFS</definition>
        <argsstring>(Vertice *vertice)</argsstring>
        <name>PercorrerArestasDFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
<para>Percorre recursivamente as arestas de um vértice utilizando DFS. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em profundidade (DFS) a partir de um vértice.</para>
<para>Marca o vértice atual como visitado, imprime-o, e continua a travessia em profundidade para todos os vértices adjacentes ainda não visitados.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice inicial da travessia. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/Aresta.c" line="86" column="6" bodyfile="Biblioteca/Aresta.c" bodystart="86" bodyend="109"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Estruturas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>CriarAresta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeAtual,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeInserido)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>arestaCriada<sp/>=<sp/>(<ref refid="struct_aresta" kindref="compound">Aresta</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_aresta" kindref="compound">Aresta</ref>));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arestaCriada<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>arestaCriada-&gt;adjVertice<sp/>=<sp/>verticeInserido;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>arestaCriada-&gt;proxAresta<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>arestaCriada-&gt;primNefasta<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verticeAtual-&gt;primAresta<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticeAtual-&gt;primAresta<sp/>=<sp/>arestaCriada;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>auxAresta<sp/>=<sp/>verticeAtual-&gt;primAresta;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxAresta-&gt;proxAresta<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxAresta<sp/>=<sp/>auxAresta-&gt;proxAresta;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxAresta-&gt;proxAresta<sp/>=<sp/>arestaCriada;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arestaCriada;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>EliminarAresta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeOrigem,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeDestino)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>auxAresta<sp/>=<sp/>verticeOrigem-&gt;primAresta;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>eliminar<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxAresta<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxAresta-&gt;adjVertice<sp/>==<sp/>verticeDestino)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eliminar<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verticeOrigem-&gt;primAresta<sp/>=<sp/>auxAresta-&gt;proxAresta;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eliminar-&gt;proxAresta<sp/>=<sp/>auxAresta-&gt;proxAresta;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(auxAresta);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>verticeOrigem-&gt;primAresta;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eliminar<sp/>=<sp/>auxAresta;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxAresta<sp/>=<sp/>auxAresta-&gt;proxAresta;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerArestasDFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>vertice)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertice-&gt;visitado<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertice-&gt;visitado<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>auxAresta<sp/>=<sp/>vertice-&gt;primAresta;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MostrarCaminho(vertice);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxAresta<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>auxVertice<sp/>=<sp/>auxAresta-&gt;adjVertice;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxVertice-&gt;visitado<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercorrerArestasDFS(auxAresta-&gt;adjVertice);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxAresta<sp/>=<sp/>auxAresta-&gt;proxAresta;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Biblioteca/Aresta.c"/>
  </compounddef>
</doxygen>
