<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_algoritmos_procura_8c" kind="file" language="C++">
    <compoundname>AlgoritmosProcura.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_biblioteca_2_estruturas_8h" local="yes">Estruturas.h</includes>
    <incdepgraph>
      <node id="1">
        <label>Biblioteca/AlgoritmosProcura.c</label>
        <link refid="_algoritmos_procura_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Estruturas.h</label>
        <link refid="_biblioteca_2_estruturas_8h_source"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_algoritmos_procura_8c_1a581d5867c4b1f82d52daa44752f08c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafoDFS</definition>
        <argsstring>(Grafo *grafo)</argsstring>
        <name>PercorrerGrafoDFS</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <briefdescription>
<para>Realiza uma travessia em profundidade (DFS) em todo o grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em profundidade (DFS) sobre todo o grafo.</para>
<para>Percorre todos os vértices do grafo e, para cada um que ainda não tenha sido visitado, inicia a procura em profundidade através da função PercorrerArestasDFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/AlgoritmosProcura.c" line="15" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="15" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_algoritmos_procura_8c_1a84743b88aff403666363cf8b4ef96dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerVerticeDFS</definition>
        <argsstring>(Vertice *primVertice, Vertice *segVertice)</argsstring>
        <name>PercorrerVerticeDFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>primVertice</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>segVertice</declname>
        </param>
        <briefdescription>
<para>Procura recursivamente um caminho entre dois vértices utilizando DFS. </para>
        </briefdescription>
        <detaileddescription>
<para>Executa DFS entre dois vértices específicos.</para>
<para>Marca o vértice atual como visitado, imprime o caminho e verifica se corresponde ao vértice de destino. Caso não corresponda, continua a procurar recursivamente pelas arestas adjacentes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primVertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segVertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o caminho entre os dois vértices for encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/AlgoritmosProcura.c" line="40" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="_algoritmos_procura_8c_1a17d6b8d7e56470daddbbb082097ca9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafoBFS</definition>
        <argsstring>(Grafo *grafo)</argsstring>
        <name>PercorrerGrafoBFS</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <briefdescription>
<para>Realiza uma travessia em largura (BFS) em todo o grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em largura (BFS) sobre todo o grafo.</para>
<para>Percorre todos os vértices do grafo e inicia a procura em largura (BFS) a partir de cada vértice ainda não visitado, utilizando a função PercorrerVerticeBFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/AlgoritmosProcura.c" line="54" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="_algoritmos_procura_8c_1a8dd6d9b4c6829c136c34ff3ed960931e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerVerticeBFS</definition>
        <argsstring>(Vertice *origem, Vertice *destino)</argsstring>
        <name>PercorrerVerticeBFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>origem</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>destino</declname>
        </param>
        <briefdescription>
<para>Realiza uma procura em largura (BFS) a partir de um vértice de origem. </para>
        </briefdescription>
        <detaileddescription>
<para>Executa BFS a partir de um vértice, até encontrar (ou não) um destino.</para>
<para>Utiliza uma fila para visitar os vértices de forma sequencial e marca-os como visitados. Se um vértice de destino for especificado, a procura termina quando esse vértice é alcançado.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origem</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de partida. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destino</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino (opcional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o destino for alcançado ou a travessia for concluída. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Biblioteca/AlgoritmosProcura.c" line="69" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="69" bodyend="72"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Estruturas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafoDFS(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>auxVertice<sp/>=<sp/>grafo-&gt;primVertice;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(auxVertice<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxVertice-&gt;visitado<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercorrerArestasDFS(auxVertice);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxVertice<sp/>=<sp/>auxVertice-&gt;proxVertice;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerVerticeDFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>primVertice,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>segVertice)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Código<sp/>mantido<sp/>conforme<sp/>pedido</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafoBFS(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Código<sp/>mantido<sp/>conforme<sp/>pedido</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerVerticeBFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>origem,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>destino)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Código<sp/>mantido<sp/>conforme<sp/>pedido</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Biblioteca/AlgoritmosProcura.c"/>
  </compounddef>
</doxygen>
