<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="_camada_main_2_estruturas_8h" kind="file" language="C++">
    <compoundname>Estruturas.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includedby refid="_apoio_main_8c" local="yes">CamadaMain/ApoioMain.c</includedby>
    <includedby refid="main_8c" local="yes">CamadaMain/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>CamadaMain/Estruturas.h</label>
        <link refid="_camada_main_2_estruturas_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>CamadaMain/Estruturas.h</label>
        <link refid="_camada_main_2_estruturas_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CamadaMain/main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_dados" prot="public">Dados</innerclass>
    <innerclass refid="struct_grafo" prot="public">Grafo</innerclass>
    <innerclass refid="struct_vertice" prot="public">Vertice</innerclass>
    <innerclass refid="struct_aresta" prot="public">Aresta</innerclass>
    <innerclass refid="struct_nefasta" prot="public">Nefasta</innerclass>
    <innerclass refid="struct_espera" prot="public">Espera</innerclass>
    <innerclass refid="struct_vertice_file" prot="public">VerticeFile</innerclass>
    <innerclass refid="struct_aresta_file" prot="public">ArestaFile</innerclass>
    <innerclass refid="struct_nefasta_file" prot="public">NefastaFile</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="_camada_main_2_estruturas_8h_1aacb2feada17ca3f9edcd1c57787cf4ca" prot="public" static="no">
        <name>FICHEIRO</name>
        <initializer>30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="3" column="11" bodyfile="CamadaMain/Estruturas.h" bodystart="3" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1aac4bde2f2384ec7574401c6a2b12d7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
        <definition>Grafo * CarregarMatriz</definition>
        <argsstring>(char *nomeFicheiro)</argsstring>
        <name>CarregarMatriz</name>
        <param>
          <type>char *</type>
          <declname>nomeFicheiro</declname>
        </param>
        <briefdescription>
<para>Carrega os dados de um grafo a partir de um ficheiro de texto com matriz. </para>
        </briefdescription>
        <detaileddescription>
<para>Carrega os dados do grafo a partir de um ficheiro de texto com matriz.</para>
<para>Lê o ficheiro, determina as dimensões da matriz, identifica os vértices e cria o grafo com base nessas informações.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nomeFicheiro</parametername>
</parameternamelist>
<parameterdescription>
<para>Nome do ficheiro a ser lido. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Grafo* Apontador para o grafo carregado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="60" column="7" bodyfile="Biblioteca/Dados.c" bodystart="14" bodyend="34" declfile="CamadaMain/Estruturas.h" declline="60" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1afdd7a44c6441b1ac440935092bd85084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ContarLinhasColunas</definition>
        <argsstring>(FILE *grafoTXT, int dimensao[], int *contadorVertice)</argsstring>
        <name>ContarLinhasColunas</name>
        <param>
          <type>FILE *</type>
          <declname>grafoTXT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimensao</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int *</type>
          <declname>contadorVertice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="61" column="5" declfile="CamadaMain/Estruturas.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a8ce99bb6d7a08df3a6f4dd07cb856bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_dados" kindref="compound">Dados</ref> *</type>
        <definition>Dados * EncontrarVertices</definition>
        <argsstring>(FILE *grafoTXT, Dados *dados)</argsstring>
        <name>EncontrarVertices</name>
        <param>
          <type>FILE *</type>
          <declname>grafoTXT</declname>
        </param>
        <param>
          <type><ref refid="struct_dados" kindref="compound">Dados</ref> *</type>
          <declname>dados</declname>
        </param>
        <briefdescription>
<para>Encontra e extrai os vértices existentes num ficheiro de texto. </para>
        </briefdescription>
        <detaileddescription>
<para>Encontra e armazena os vértices identificados num ficheiro de texto.</para>
<para>Percorre o ficheiro, identifica os caracteres válidos como vértices e guarda as suas posições e frequências na estrutura <ref refid="struct_dados" kindref="compound">Dados</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafoTXT</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o ficheiro já aberto. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>Array de estruturas <ref refid="struct_dados" kindref="compound">Dados</ref> onde serão armazenadas as informações dos vértices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dados* Apontador para o array preenchido com os dados dos vértices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="62" column="7" bodyfile="Biblioteca/Dados.c" bodystart="96" bodyend="129" declfile="CamadaMain/Estruturas.h" declline="62" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ae2e04f9441ec5405dd900a5e0c910613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GuardarVertices</definition>
        <argsstring>(Grafo *grafo, char *file)</argsstring>
        <name>GuardarVertices</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Guarda os vértices do grafo num ficheiro binário. </para>
        </briefdescription>
        <detaileddescription>
<para>Percorre a lista de vértices e escreve, um a um, os seus dados e estado de visita num ficheiro binário especificado.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Nome do ficheiro de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se os dados foram guardados com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="64" column="6" bodyfile="Biblioteca/Dados.c" bodystart="140" bodyend="159" declfile="CamadaMain/Estruturas.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a2443c9ceb3098fd64a9de47a3ea3d436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
        <definition>Grafo * CarregarVertices</definition>
        <argsstring>(Grafo *grafo, char *file)</argsstring>
        <name>CarregarVertices</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Carrega os vértices de um ficheiro binário para um grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Carrega os vértices de um ficheiro binário para o grafo.</para>
<para>Lê os vértices guardados em ficheiro binário e reconstrói a lista ligada de vértices no grafo fornecido.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo onde os vértices serão inseridos. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Nome do ficheiro binário. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Grafo* Apontador para o grafo atualizado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="65" column="7" bodyfile="Biblioteca/Dados.c" bodystart="170" bodyend="205" declfile="CamadaMain/Estruturas.h" declline="65" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ae8cc9a1eb2a5a3db9dab77fbcf88c613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GuardarArestas</definition>
        <argsstring>(Grafo *grafo, char *file)</argsstring>
        <name>GuardarArestas</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Guarda as arestas do grafo num ficheiro binário. </para>
        </briefdescription>
        <detaileddescription>
<para>Para cada vértice do grafo, escreve todas as suas arestas num ficheiro binário. Cada aresta contém as posições de origem e destino, seguidas das respetivas nefastas.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Nome do ficheiro de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se os dados foram guardados com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="66" column="6" bodyfile="Biblioteca/Dados.c" bodystart="216" bodyend="246" declfile="CamadaMain/Estruturas.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a73edb3e9b2eada24cd836e7a8b0072bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CarregarArestas</definition>
        <argsstring>(Grafo *grafo, char *file)</argsstring>
        <name>CarregarArestas</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Carrega as arestas de um ficheiro binário para o grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Lê cada aresta armazenada no ficheiro binário, encontra os vértices de origem e destino, recria as ligações e carrega também as posições nefastas associadas.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo onde as arestas serão inseridas. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Nome do ficheiro binário. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se os dados foram carregados com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="67" column="6" bodyfile="Biblioteca/Dados.c" bodystart="257" bodyend="283" declfile="CamadaMain/Estruturas.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ad9eec3b7946d43fcbb7b0c882b0953b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GuardarNefastas</definition>
        <argsstring>(FILE *ficheiro, Aresta *aresta)</argsstring>
        <name>GuardarNefastas</name>
        <param>
          <type>FILE *</type>
          <declname>ficheiro</declname>
        </param>
        <param>
          <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
          <declname>aresta</declname>
        </param>
        <briefdescription>
<para>Guarda as posições nefastas associadas a uma aresta num ficheiro binário. </para>
        </briefdescription>
        <detaileddescription>
<para>Escreve o número total de posições nefastas da aresta e, em seguida, cada uma das posições com a respetiva frequência.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ficheiro</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o ficheiro binário. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aresta</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para a aresta cujas posições nefastas serão guardadas. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se os dados foram guardados com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="68" column="6" bodyfile="Biblioteca/Dados.c" bodystart="294" bodyend="319" declfile="CamadaMain/Estruturas.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1aacc0fe5ef8915ecb1c2057383ccc6b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CarregarNefastas</definition>
        <argsstring>(FILE *ficheiro, Aresta *aresta)</argsstring>
        <name>CarregarNefastas</name>
        <param>
          <type>FILE *</type>
          <declname>ficheiro</declname>
        </param>
        <param>
          <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
          <declname>aresta</declname>
        </param>
        <briefdescription>
<para>Carrega as posições nefastas de uma aresta a partir de um ficheiro binário. </para>
        </briefdescription>
        <detaileddescription>
<para>Lê a quantidade de posições nefastas associadas a uma aresta e insere cada uma na respetiva lista ligada.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ficheiro</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o ficheiro binário. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aresta</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para a aresta onde as posições serão inseridas. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="69" column="6" bodyfile="Biblioteca/Dados.c" bodystart="329" bodyend="347" declfile="CamadaMain/Estruturas.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a3e1bcf3f33a4ca08c529b2583480ec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
        <definition>Grafo * CriarGrafo</definition>
        <argsstring>(int linhas, int colunas)</argsstring>
        <name>CriarGrafo</name>
        <param>
          <type>int</type>
          <declname>linhas</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colunas</declname>
        </param>
        <briefdescription>
<para>Cria e inicializa um novo grafo com as dimensões indicadas. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria um novo grafo com base nas dimensões especificadas.</para>
<para>Aloca memória para a estrutura do grafo, define as suas dimensões e inicializa o ponteiro para o primeiro vértice como NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linhas</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de linhas da matriz do grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colunas</parametername>
</parameternamelist>
<parameterdescription>
<para>Número de colunas da matriz do grafo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Grafo* Apontador para o grafo criado, ou NULL em caso de falha. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="71" column="7" bodyfile="Biblioteca/Grafo.c" bodystart="15" bodyend="26" declfile="CamadaMain/Estruturas.h" declline="71" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a9b9eb1808ea0f388f2cf131165b8d6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AdicionarVertice</definition>
        <argsstring>(Grafo *grafo, Vertice *verticeCriado)</argsstring>
        <name>AdicionarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeCriado</declname>
        </param>
        <briefdescription>
<para>Adiciona um novo vértice ao grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Insere o vértice no final da lista ligada de vértices do grafo. Após a inserção, chama a função PercorrerGrafo para atualizar as ligações entre o novo vértice e os existentes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo onde o vértice será inserido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeCriado</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice a adicionar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o vértice foi adicionado com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="72" column="6" bodyfile="Biblioteca/Grafo.c" bodystart="38" bodyend="56" declfile="CamadaMain/Estruturas.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a25b057885d271a291bdeb9af12f42511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafo</definition>
        <argsstring>(Grafo *grafo, Vertice *vertice)</argsstring>
        <name>PercorrerGrafo</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
<para>Atualiza o grafo com base nas frequências dos vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Atualiza o grafo com as novas ligações e nefastas após inserção de um vértice.</para>
<para>Percorre todos os vértices do grafo e, sempre que encontra um vértice com a mesma frequência que o novo vértice inserido, cria uma aresta entre eles e identifica posições nefastas.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice recentemente inserido no grafo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o processo foi realizado com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="73" column="6" bodyfile="Biblioteca/Grafo.c" bodystart="68" bodyend="81" declfile="CamadaMain/Estruturas.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a533a7c57274c657db753cfac67146516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
        <definition>Vertice * CriarVertice</definition>
        <argsstring>(Grafo *grafo, int linha, int coluna, char frequencia)</argsstring>
        <name>CriarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <param>
          <type>char</type>
          <declname>frequencia</declname>
        </param>
        <briefdescription>
<para>Cria e inicializa um novo vértice com os dados fornecidos. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria um novo vértice com dados especificados e insere-o no grafo.</para>
<para>Define a posição e frequência do vértice, inicializa os seus campos internos e insere-o no grafo através da função AdicionarVertice.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo onde o vértice será inserido. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da posição do vértice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da posição do vértice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequencia</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequência da antena. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vertice* Apontador para o vértice criado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="75" column="9" bodyfile="Biblioteca/Vertice.c" bodystart="17" bodyend="32" declfile="CamadaMain/Estruturas.h" declline="75" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ab067dca496d8809ff753f95f9256f96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
        <definition>Vertice * EliminarVertice</definition>
        <argsstring>(Grafo *grafo, int linha, int coluna)</argsstring>
        <name>EliminarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <briefdescription>
<para>Remove um vértice do grafo com base na sua posição. </para>
        </briefdescription>
        <detaileddescription>
<para>Elimina um vértice do grafo com base na sua posição.</para>
<para>Procura o vértice na lista ligada do grafo, elimina todas as arestas que apontam para ele e remove-o da lista, libertando a memória.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da posição do vértice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da posição do vértice. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vertice* Apontador para o novo início da lista de vértices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="76" column="9" bodyfile="Biblioteca/Vertice.c" bodystart="44" bodyend="78" declfile="CamadaMain/Estruturas.h" declline="76" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a43dcc1d73d9dd27f9e7288e87b5153d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
        <definition>Vertice * EditarVertice</definition>
        <argsstring>(Grafo *grafo, int linha, int coluna, char frequencia)</argsstring>
        <name>EditarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <param>
          <type>char</type>
          <declname>frequencia</declname>
        </param>
        <briefdescription>
<para>Edita um vértice removendo o existente e criando um novo com nova frequência. </para>
        </briefdescription>
        <detaileddescription>
<para>Edita um vértice substituindo-o por um novo com frequência alterada.</para>
<para>Elimina o vértice atual na posição indicada e insere um novo vértice com a nova frequência.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da posição do vértice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da posição do vértice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequencia</parametername>
</parameternamelist>
<parameterdescription>
<para>Nova frequência a atribuir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vertice* Apontador para o vértice editado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="77" column="9" bodyfile="Biblioteca/Vertice.c" bodystart="90" bodyend="95" declfile="CamadaMain/Estruturas.h" declline="77" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a76e91a128e5a4b14260e2d6af1d83b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
        <definition>Vertice * EncontrarVertice</definition>
        <argsstring>(Grafo *grafo, int linha, int coluna)</argsstring>
        <name>EncontrarVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <briefdescription>
<para>Procura e devolve um vértice no grafo com base na sua posição. </para>
        </briefdescription>
        <detaileddescription>
<para>Procura e retorna um vértice com base na sua posição.</para>
<para>Percorre a lista ligada de vértices até encontrar um com as coordenadas especificadas.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da posição a procurar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da posição a procurar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vertice* Apontador para o vértice encontrado, ou NULL se não existir. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="78" column="9" bodyfile="Biblioteca/Vertice.c" bodystart="106" bodyend="118" declfile="CamadaMain/Estruturas.h" declline="78" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a1e6be863ed49892f7e938596c8d6e23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
        <definition>Aresta * CriarAresta</definition>
        <argsstring>(Vertice *verticeAtual, Vertice *verticeInserido)</argsstring>
        <name>CriarAresta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeInserido</declname>
        </param>
        <briefdescription>
<para>Cria uma nova aresta entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria uma aresta entre dois vértices.</para>
<para>Aloca memória para uma nova aresta, liga-a ao vértice de destino e insere-a no final da lista de adjacências do vértice de origem. Inicializa os campos da aresta.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeInserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aresta* Apontador para a aresta criada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="80" column="8" bodyfile="Biblioteca/Aresta.c" bodystart="16" bodyend="41" declfile="CamadaMain/Estruturas.h" declline="80" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a931d7918d3f43c05762c901538def236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
        <definition>Aresta * EliminarAresta</definition>
        <argsstring>(Vertice *verticeOrigem, Vertice *verticeDestino)</argsstring>
        <name>EliminarAresta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeOrigem</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeDestino</declname>
        </param>
        <briefdescription>
<para>Remove uma aresta entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Percorre a lista de adjacências do vértice de origem e remove a ligação para o vértice de destino, se existir. Liberta a memória da aresta eliminada.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeOrigem</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeDestino</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Aresta* Apontador para o início atualizado da lista de arestas do vértice de origem. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="81" column="8" bodyfile="Biblioteca/Aresta.c" bodystart="52" bodyend="76" declfile="CamadaMain/Estruturas.h" declline="81" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ae600f365b05d662e10d5e87affa09c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AdicionarNefasta</definition>
        <argsstring>(Nefasta *nefastaAtual, Nefasta *nefastaInserida, Vertice *verticeAtual, Vertice *verticeInserido)</argsstring>
        <name>AdicionarNefasta</name>
        <param>
          <type><ref refid="struct_nefasta" kindref="compound">Nefasta</ref> *</type>
          <declname>nefastaAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_nefasta" kindref="compound">Nefasta</ref> *</type>
          <declname>nefastaInserida</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeInserido</declname>
        </param>
        <briefdescription>
<para>Adiciona uma ou duas posições nefastas a uma aresta entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Adiciona uma ou duas posições nefastas a uma aresta.</para>
<para>Percorre a lista de arestas do vértice atual até encontrar a que liga ao vértice inserido e adiciona as estruturas <ref refid="struct_nefasta" kindref="compound">Nefasta</ref> no fim da lista correspondente.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nefastaAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Estrutura <ref refid="struct_nefasta" kindref="compound">Nefasta</ref> associada à posição do vértice atual (pode ser NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nefastaInserida</parametername>
</parameternamelist>
<parameterdescription>
<para>Estrutura <ref refid="struct_nefasta" kindref="compound">Nefasta</ref> associada à posição do vértice inserido (pode ser NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeInserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a inserção foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="82" column="6" bodyfile="Biblioteca/Nefasta.c" bodystart="162" bodyend="207" declfile="CamadaMain/Estruturas.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a3291297afbd5319cb04c36fbb04b6498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerArestasDFS</definition>
        <argsstring>(Vertice *vertice)</argsstring>
        <name>PercorrerArestasDFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
<para>Percorre recursivamente as arestas de um vértice utilizando DFS. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em profundidade (DFS) a partir de um vértice.</para>
<para>Marca o vértice atual como visitado, imprime-o, e continua a travessia em profundidade para todos os vértices adjacentes ainda não visitados.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o vértice inicial da travessia. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="83" column="6" bodyfile="Biblioteca/Aresta.c" bodystart="86" bodyend="109" declfile="CamadaMain/Estruturas.h" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1ac2f2f192e57def4d675d1447597d683b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ExisteVertice</definition>
        <argsstring>(Grafo *grafo, int atual[], int inserido[])</argsstring>
        <name>ExisteVertice</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atual</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>inserido</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Verifica se uma posição já existe como vértice no grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifica se já existe algum dos vértices em posições dadas.</para>
<para>Percorre a lista de vértices do grafo e verifica se alguma das posições dadas corresponde à posição de um vértice já existente.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atual</parametername>
</parameternamelist>
<parameterdescription>
<para>Array com as coordenadas da primeira posição. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Array com as coordenadas da segunda posição. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se alguma das posições já existir no grafo. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="85" column="6" bodyfile="Biblioteca/Nefasta.c" bodystart="16" bodyend="33" declfile="CamadaMain/Estruturas.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1aed1f128c5665a92d36e30453ea9c72a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CriarPosicaoNefasta</definition>
        <argsstring>(Vertice *verticeAtual, Vertice *verticeInserido, Grafo *grafo)</argsstring>
        <name>CriarPosicaoNefasta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeInserido</declname>
        </param>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <briefdescription>
<para>Cria as posições com efeito nefasto entre dois vértices. </para>
        </briefdescription>
        <detaileddescription>
<para>Calcula e cria posições nefastas com base nas posições de dois vértices.</para>
<para>Calcula as posições nefastas com base na distância entre os vértices. Verifica se as posições já existem no grafo ou se estão fora dos limites e chama a função CriarNefasta para as registar.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeInserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a criação das posições nefastas foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="86" column="6" bodyfile="Biblioteca/Nefasta.c" bodystart="47" bodyend="114" declfile="CamadaMain/Estruturas.h" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a14149d0ef69cea9b06c6c8b6d9cf1413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_nefasta" kindref="compound">Nefasta</ref> *</type>
        <definition>Nefasta * CriarNefasta</definition>
        <argsstring>(Vertice *verticeAtual, Vertice *verticeInserido, Grafo *grafo, int atual[], int inserido[])</argsstring>
        <name>CriarNefasta</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeAtual</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>verticeInserido</declname>
        </param>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atual</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>inserido</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Cria e inicializa uma ou duas estruturas <ref refid="struct_nefasta" kindref="compound">Nefasta</ref> com base nas posições indicadas. </para>
        </briefdescription>
        <detaileddescription>
<para>Cria estruturas <ref refid="struct_nefasta" kindref="compound">Nefasta</ref> a partir de duas posições.</para>
<para>Verifica se as posições são válidas e dentro dos limites do grafo. Para cada posição válida, aloca memória para a estrutura <ref refid="struct_nefasta" kindref="compound">Nefasta</ref>, define os seus dados e chama AdicionarNefasta.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verticeAtual</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verticeInserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atual</parametername>
</parameternamelist>
<parameterdescription>
<para>Posição nefastamente afetada no lado do vértice atual (pode ser NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inserido</parametername>
</parameternamelist>
<parameterdescription>
<para>Posição nefastamente afetada no lado do vértice inserido (pode ser NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nefasta* Retorna true após executar a criação. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="87" column="9" bodyfile="Biblioteca/Nefasta.c" bodystart="128" bodyend="149" declfile="CamadaMain/Estruturas.h" declline="87" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a581d5867c4b1f82d52daa44752f08c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafoDFS</definition>
        <argsstring>(Grafo *grafo)</argsstring>
        <name>PercorrerGrafoDFS</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <briefdescription>
<para>Realiza uma travessia em profundidade (DFS) em todo o grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em profundidade (DFS) sobre todo o grafo.</para>
<para>Percorre todos os vértices do grafo e, para cada um que ainda não tenha sido visitado, inicia a procura em profundidade através da função PercorrerArestasDFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="89" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="15" bodyend="28" declfile="CamadaMain/Estruturas.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a84743b88aff403666363cf8b4ef96dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerVerticeDFS</definition>
        <argsstring>(Vertice *primVertice, Vertice *segVertice)</argsstring>
        <name>PercorrerVerticeDFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>primVertice</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>segVertice</declname>
        </param>
        <briefdescription>
<para>Procura recursivamente um caminho entre dois vértices utilizando DFS. </para>
        </briefdescription>
        <detaileddescription>
<para>Executa DFS entre dois vértices específicos.</para>
<para>Marca o vértice atual como visitado, imprime o caminho e verifica se corresponde ao vértice de destino. Caso não corresponda, continua a procurar recursivamente pelas arestas adjacentes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primVertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de origem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segVertice</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o caminho entre os dois vértices for encontrado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="90" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="40" bodyend="43" declfile="CamadaMain/Estruturas.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a8dd6d9b4c6829c136c34ff3ed960931e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerVerticeBFS</definition>
        <argsstring>(Vertice *origem, Vertice *destino)</argsstring>
        <name>PercorrerVerticeBFS</name>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>origem</declname>
        </param>
        <param>
          <type><ref refid="struct_vertice" kindref="compound">Vertice</ref> *</type>
          <declname>destino</declname>
        </param>
        <briefdescription>
<para>Realiza uma procura em largura (BFS) a partir de um vértice de origem. </para>
        </briefdescription>
        <detaileddescription>
<para>Executa BFS a partir de um vértice, até encontrar (ou não) um destino.</para>
<para>Utiliza uma fila para visitar os vértices de forma sequencial e marca-os como visitados. Se um vértice de destino for especificado, a procura termina quando esse vértice é alcançado.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origem</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de partida. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destino</parametername>
</parameternamelist>
<parameterdescription>
<para>Vértice de destino (opcional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se o destino for alcançado ou a travessia for concluída. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="92" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="69" bodyend="72" declfile="CamadaMain/Estruturas.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a17d6b8d7e56470daddbbb082097ca9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PercorrerGrafoBFS</definition>
        <argsstring>(Grafo *grafo)</argsstring>
        <name>PercorrerGrafoBFS</name>
        <param>
          <type><ref refid="struct_grafo" kindref="compound">Grafo</ref> *</type>
          <declname>grafo</declname>
        </param>
        <briefdescription>
<para>Realiza uma travessia em largura (BFS) em todo o grafo. </para>
        </briefdescription>
        <detaileddescription>
<para>Realiza uma travessia em largura (BFS) sobre todo o grafo.</para>
<para>Percorre todos os vértices do grafo e inicia a procura em largura (BFS) a partir de cada vértice ainda não visitado, utilizando a função PercorrerVerticeBFS.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>grafo</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o grafo a ser percorrido. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Se a travessia foi realizada com sucesso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="93" column="6" bodyfile="Biblioteca/AlgoritmosProcura.c" bodystart="54" bodyend="57" declfile="CamadaMain/Estruturas.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_camada_main_2_estruturas_8h_1a9927d11b3108111beb1a86c635ba0858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_espera" kindref="compound">Espera</ref> *</type>
        <definition>Espera * PercorrerArestasBFS</definition>
        <argsstring>(Aresta *listaArestas, Espera *queue)</argsstring>
        <name>PercorrerArestasBFS</name>
        <param>
          <type><ref refid="struct_aresta" kindref="compound">Aresta</ref> *</type>
          <declname>listaArestas</declname>
        </param>
        <param>
          <type><ref refid="struct_espera" kindref="compound">Espera</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Percorre as arestas de um vértice e adiciona os adjacentes não visitados à fila (BFS). </para>
        </briefdescription>
        <detaileddescription>
<para>Percorre as arestas de um vértice e adiciona os adjacentes à fila (BFS).</para>
<para>Para cada aresta da lista, verifica se o vértice adjacente ainda não foi visitado. Se não tiver sido, marca-o como visitado e adiciona-o à fila (estrutura <ref refid="struct_espera" kindref="compound">Espera</ref>) para futura exploração.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listaArestas</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista de arestas do vértice atual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Fila atual de vértices a visitar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Espera* Fila atualizada com os novos vértices descobertos. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CamadaMain/Estruturas.h" line="95" column="8" bodyfile="Biblioteca/Queue.c" bodystart="15" bodyend="47" declfile="CamadaMain/Estruturas.h" declline="95" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FICHEIRO<sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posicao[2];</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>frequencia;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}<sp/><ref refid="struct_dados" kindref="compound">Dados</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>primVertice;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensao[2];</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<ref refid="struct_grafo" kindref="compound">Grafo</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dados" kindref="compound">Dados</ref><sp/>dados;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>proxVertice;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>primAresta;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visitado;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>adjVertice;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>proxAresta;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_nefasta" kindref="compound">Nefasta</ref>*<sp/>primNefasta;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<ref refid="struct_aresta" kindref="compound">Aresta</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_nefasta" kindref="compound">Nefasta</ref>*<sp/>proxNefasta;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dados" kindref="compound">Dados</ref><sp/>dados;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<ref refid="struct_nefasta" kindref="compound">Nefasta</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>vertice;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_espera" kindref="compound">Espera</ref>*<sp/>proxVertice;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/><ref refid="struct_espera" kindref="compound">Espera</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_dados" kindref="compound">Dados</ref><sp/>dados;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visitado;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}<ref refid="struct_vertice_file" kindref="compound">VerticeFile</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origemPos[2];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destinoPos[2];<sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/><ref refid="struct_aresta_file" kindref="compound">ArestaFile</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posicao[2];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>frequencia;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}<sp/><ref refid="struct_nefasta_file" kindref="compound">NefastaFile</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>CarregarMatriz(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>nomeFicheiro);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ContarLinhasColunas(FILE*<sp/>grafoTXT,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimensao[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>contadorVertice);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="struct_dados" kindref="compound">Dados</ref>*<sp/>EncontrarVertices(FILE*<sp/>grafoTXT,<sp/><ref refid="struct_dados" kindref="compound">Dados</ref>*<sp/>dados);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GuardarVertices(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>CarregarVertices(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GuardarArestas(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CarregarArestas(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GuardarNefastas(FILE*<sp/>ficheiro,<sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>aresta);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CarregarNefastas(FILE*<sp/>ficheiro,<sp/><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>aresta);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>CriarGrafo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linhas,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colunas);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AdicionarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeCriado);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafo(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>vertice);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>CriarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>frequencia);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>EliminarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>EditarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>frequencia);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>EncontrarVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>CriarAresta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeAtual,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeInserido);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>EliminarAresta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeOrigem,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeDestino);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AdicionarNefasta(<ref refid="struct_nefasta" kindref="compound">Nefasta</ref>*<sp/>nefastaAtual,<sp/><ref refid="struct_nefasta" kindref="compound">Nefasta</ref>*<sp/>nefastaInserida,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeAtual,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeInserido);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerArestasDFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>vertice);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExisteVertice(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atual[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inserido[]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CriarPosicaoNefasta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeAtual,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeInserido,<sp/><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="struct_nefasta" kindref="compound">Nefasta</ref>*<sp/>CriarNefasta(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeAtual,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>verticeInserido,<sp/><ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atual[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inserido[]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafoDFS(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerVerticeDFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>primVertice,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>segVertice);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerVerticeBFS(<ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>origem,<sp/><ref refid="struct_vertice" kindref="compound">Vertice</ref>*<sp/>destino);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PercorrerGrafoBFS(<ref refid="struct_grafo" kindref="compound">Grafo</ref>*<sp/>grafo);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="struct_espera" kindref="compound">Espera</ref>*<sp/>PercorrerArestasBFS(<ref refid="struct_aresta" kindref="compound">Aresta</ref>*<sp/>listaArestas,<sp/><ref refid="struct_espera" kindref="compound">Espera</ref>*<sp/>queue);</highlight></codeline>
    </programlisting>
    <location file="CamadaMain/Estruturas.h"/>
  </compounddef>
</doxygen>
